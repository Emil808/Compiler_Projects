Tokens:
[@0,0:0='$',<6>,1:0]
[@1,1:3='abc',<12>,1:1]
[@2,4:4='=',<21>,1:4]
[@3,6:8='500',<13>,1:6]
[@4,9:9='*',<15>,1:9]
[@5,10:10='5',<13>,1:10]
[@6,11:11='+',<17>,1:11]
[@7,12:12='3',<13>,1:12]
[@8,13:13=';',<1>,1:13]
[@9,15:15='$',<6>,2:0]
[@10,16:18='def',<12>,2:1]
[@11,20:20='=',<21>,2:5]
[@12,22:22='$',<6>,2:7]
[@13,23:25='abc',<12>,2:8]
[@14,27:28='**',<19>,2:12]
[@15,30:30='7',<13>,2:15]
[@16,31:31=';',<1>,2:16]
[@17,35:36='if',<7>,4:0]
[@18,38:38='(',<2>,4:3]
[@19,39:39='$',<6>,4:4]
[@20,40:42='abc',<12>,4:5]
[@21,44:45='<=',<25>,4:9]
[@22,47:47='$',<6>,4:12]
[@23,48:50='def',<12>,4:13]
[@24,51:51=')',<3>,4:16]
[@25,52:52='{',<4>,4:17]
[@26,54:54='$',<6>,5:0]
[@27,55:57='abc',<12>,5:1]
[@28,59:59='=',<21>,5:5]
[@29,61:61='4',<13>,5:7]
[@30,63:63='/',<16>,5:9]
[@31,65:65='3',<13>,5:11]
[@32,67:67='+',<17>,5:13]
[@33,69:69='8',<13>,5:15]
[@34,71:71='*',<15>,5:17]
[@35,73:73='9',<13>,5:19]
[@36,74:74=';',<1>,5:20]
[@37,77:77='}',<5>,6:0]
[@38,79:83='elsif',<9>,7:0]
[@39,85:85='(',<2>,7:6]
[@40,87:87='$',<6>,7:8]
[@41,88:90='abc',<12>,7:9]
[@42,92:93='>=',<27>,7:13]
[@43,95:97='100',<13>,7:16]
[@44,98:98=')',<3>,7:19]
[@45,100:100='{',<4>,7:21]
[@46,102:102='$',<6>,8:0]
[@47,103:105='abc',<12>,8:1]
[@48,107:107='=',<21>,8:5]
[@49,109:111='4.4',<14>,8:7]
[@50,113:113='*',<15>,8:11]
[@51,115:117='7.1',<14>,8:13]
[@52,119:119='-',<18>,8:17]
[@53,121:121='3',<13>,8:19]
[@54,122:122=';',<1>,8:20]
[@55,125:125='}',<5>,9:0]
[@56,128:129='if',<7>,11:0]
[@57,130:130='(',<2>,11:2]
[@58,131:131='$',<6>,11:3]
[@59,132:134='abc',<12>,11:4]
[@60,136:137='>=',<27>,11:8]
[@61,139:143='12.40',<14>,11:11]
[@62,144:144=')',<3>,11:16]
[@63,145:145='{',<4>,11:17]
[@64,147:147='$',<6>,12:0]
[@65,148:152='asdon',<12>,12:1]
[@66,154:154='=',<21>,12:7]
[@67,156:162='093.235',<14>,12:9]
[@68,164:164='*',<15>,12:17]
[@69,166:166='(',<2>,12:19]
[@70,168:170='482',<13>,12:21]
[@71,172:173='**',<19>,12:25]
[@72,175:175='4',<13>,12:28]
[@73,176:176=')',<3>,12:29]
[@74,178:178='+',<17>,12:31]
[@75,180:180='5',<13>,12:33]
[@76,181:181=';',<1>,12:34]
[@77,184:184='}',<5>,13:0]
[@78,186:189='else',<8>,14:0]
[@79,190:190='{',<4>,14:4]
[@80,193:197='until',<11>,15:1]
[@81,198:198='(',<2>,15:6]
[@82,199:199='$',<6>,15:7]
[@83,200:202='ume',<12>,15:8]
[@84,204:204='>',<26>,15:12]
[@85,206:206='7',<13>,15:14]
[@86,207:207=')',<3>,15:15]
[@87,208:208='{',<4>,15:16]
[@88,212:212='$',<6>,16:2]
[@89,213:215='ume',<12>,16:3]
[@90,217:217='=',<21>,16:7]
[@91,219:219='$',<6>,16:9]
[@92,220:222='ume',<12>,16:10]
[@93,224:224='+',<17>,16:14]
[@94,226:226='1',<13>,16:16]
[@95,227:227=';',<1>,16:17]
[@96,231:231='}',<5>,17:1]
[@97,233:233='}',<5>,18:0]
[@98,236:240='while',<10>,20:0]
[@99,241:241='(',<2>,20:5]
[@100,242:242='1',<13>,20:6]
[@101,243:243=')',<3>,20:7]
[@102,244:244='{',<4>,20:8]
[@103,247:247='$',<6>,21:1]
[@104,248:250='abc',<12>,21:2]
[@105,252:252='=',<21>,21:6]
[@106,254:254='3',<13>,21:8]
[@107,255:255=';',<1>,21:9]
[@108,258:258='}',<5>,22:0]
[@109,259:258='<EOF>',<-1>,22:1]

Parse tree (Lisp format):
(compound_stmt (stmt (assignment_stmt (variable $ abc) = (expr (expr (expr (number 500)) (mul_div_op *) (expr (number 5))) (add_sub_op +) (expr (number 3))) ;)) (stmt (assignment_stmt (variable $ def) = (expr (expr (variable $ abc)) ** (expr (number 7))) ;)) (stmt (if_stmt if ( (expr (expr (variable $ abc)) (rel_op <=) (expr (variable $ def))) ) { (stmt (assignment_stmt (variable $ abc) = (expr (expr (expr (number 4)) (mul_div_op /) (expr (number 3))) (add_sub_op +) (expr (expr (number 8)) (mul_div_op *) (expr (number 9)))) ;)) } elsif ( (expr (expr (variable $ abc)) (rel_op >=) (expr (number 100))) ) { (stmt (assignment_stmt (variable $ abc) = (expr (expr (expr (number 4.4)) (mul_div_op *) (expr (number 7.1))) (add_sub_op -) (expr (number 3))) ;)) })) (stmt (if_stmt if ( (expr (expr (variable $ abc)) (rel_op >=) (expr (number 12.40))) ) { (stmt (assignment_stmt (variable $ asdon) = (expr (expr (expr (number 093.235)) (mul_div_op *) (expr ( (expr (expr (number 482)) ** (expr (number 4))) ))) (add_sub_op +) (expr (number 5))) ;)) } else { (stmt (until_stmt until ( (expr (expr (variable $ ume)) (rel_op >) (expr (number 7))) ) { (stmt (assignment_stmt (variable $ ume) = (expr (expr (variable $ ume)) (add_sub_op +) (expr (number 1))) ;)) })) })) (stmt (while_stmt while ( (expr (number 1)) ) { (stmt (assignment_stmt (variable $ abc) = (expr (number 3)) ;)) })))
